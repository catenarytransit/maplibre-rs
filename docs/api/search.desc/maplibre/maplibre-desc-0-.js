searchState.loadedDescShard("maplibre", 0, "Maplibre-rs\nCollection of utilities used to perform certain …\nProvides utilities related to coordinates.\nMacro to define a new label trait\nHandles IO related processing as well as multithreading.\nHandles platform specific code. Depending on the …\nThis module implements the rendering algorithm of …\nVector tile format styling.\nTessellation for lines and polygons is implemented here.\nNested message and enum types in <code>Tile</code>.\nUtils which are used internally\nUtilities for the window system.\nRe-export of the io module.\nRe-export of the tessellation module.\nVertex buffers index data type.\nVertex buffer which includes additional padding to fulfill …\nConstructor for Fill and Stroke vertices.\nTessellator implementation.\nBuild tessellations with vectors.\nStores the context of the map.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn aligned world tile coordinate aligns a world coordinate …\nThe average circumference of the world in meters.\nApproximate radius of the earth in meters. Uses the WGS-84 …\nWithin each tile there is a separate coordinate system. …\nRepresents the position of a node within a quad tree. The …\nEvery tile has tile coordinates. These tile coordinates …\nDefines a bounding box on a tiled map with a <code>ZoomLevel</code> and …\nActual coordinates within the 3D world. The <code>z</code> value of the …\nEvery tile has tile coordinates. Every tile coordinate can …\n<code>Zoom</code> is an exponential scale that defines the zoom of the …\nAdopted from tilebelt\nThe circumference at a line of latitude in meters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdopted from tilebelt\nGet the tile which is one zoom level lower and contains …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the tile coords according to an addressing scheme. …\nTransforms the tile coordinates as defined by the tile …\nThe maximum amount of tiles this view region contains\nPadding around this view region\nReturns unique stencil reference values for …\nAdopted from Transform::calculatePosMatrix\nAdopted from Transform::coveringZoomLevel\nAt which zoom level does this region exist\nLabels for the “draw” graph\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueues PhaseItems for rendering.\nSpecifies the instructions which are going to be sent to …\nPrepares GPU-owned resources by initializing them if they …\nPass which renders debug information on top of the map.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe environment defines which types must be injected into …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe event loop was already closed\nWhen sending events to an event loop errors can occur.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLayers are described in section 4.1 of the specification\nAlthough this is an “optional” field it is required by …\nThe actual features in this tile.\nGeometry index.\nDictionary encoding for keys\nScheduling.\nHTTP client.\nDictionary encoding for values\nAny compliant implementation must first read the version …\nType definitions for asynchronous procedure calls. These …\nAPCs define an interface for performing work …\nAllows sending messages from workers to back to the caller.\nThe <code>Input</code> is not compatible with the procedure\nInputs for an <code>AsyncProcedure</code>\nThe result of the tessellation of a tile. This is sent as …\nDefines a set of strongly-typed labels for a class of …\nCall an <code>AsyncProcedure</code> using some <code>Input</code>. This function is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to receive a message non-blocking.\nSend a message back to the caller.\nContains either a polygon or line vector.\nA quad tree storing the currently loaded tiles.\nA processor able to create geometries using …\nAn indexed geometry contains an exact vector geometry, …\nIndex of tiles which can be of two types: spatial or …\nBegin of dataset processing.\nEnd of dataset processing.\nBegin of feature processing.\nEnd of feature processing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBegin of feature geometry processing.\nEnd of feature geometry processing.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBegin of feature property processing.\nEnd of feature property processing.\nAsync/await scheduler. Can schedule a task from a future …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA closure that returns a HTTP client.\nOn the web platform futures are not thread-safe (i.e. not …\nGives access to the HTTP client which can be of multiple …\nDefines the different types of HTTP clients such as basic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a source from which the raster tile are fetched.\nRepresents the tiles’ different types of source.\nRepresents a source from which the vector tile are fetched.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHolds references to core constructs of maplibre. Based on …\nA convenient builder for Kernels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo need to set renderer again\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResets the complete state of this map - a new renderer and …\nMinimum WebGPU buffer size\nHttp client for non-web targets.\nModule which is used target platform is not web related.\nScheduler for non-web targets.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncache_path: Under which path should we cache requests.\nMulti-threading with Tokio.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMulti-threading with Tokio.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueues PhaseItems for rendering.\nRequests tiles which are currently in view\nPrepares GPU-owned resources by initializing them if they …\nUploads data to the GPU which is needed for rendering.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError during processing of the pipeline\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHolds the resources necessary for the raster tiles such as …\nCreates a bind group for each fetched raster tile and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCleanup render resources here.\nExtract data from the world.\nSort the <code>RenderPhases</code> here.\nPrepare render resources from the extracted data for the …\nQueues PhaseItems that depend on <code>Prepare</code> data and queue up …\nActual rendering happens here. In most cases, only the …\nThe labels of the default App rendering stages.\nMain camera\nLabels for the “draw” graph\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecutes a <code>RenderGraph</code>\nInitializes the renderer by retrieving and preparing the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe main render pass for this application.\nSpecifies the instructions which are going to be sent to …\nDescribes the concept of a <code>RenderPhase</code> and <code>PhaseItem</code>\nRequests a device\nUtilities which holds references to GPU-owned. Usually a …\nSettings for the renderer\nRendering specific systems\nUtility for generating a tile pattern which can be used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the whole rendering pipeline for the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUtility method that computes the new apprent center or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrapper around a resource which can be initialized or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA GPU-accessible [<code>Buffer</code>].\nA GPU-accessible [<code>Buffer</code>].\nAn edge, which connects two <code>Nodes</code> in a <code>RenderGraph</code>.\nA collection of input and output <code>Edges</code> for a <code>Node</code>.\nA <code>Node</code> without any inputs, outputs and subgraphs, which …\nA <code>Node</code> which acts as an entry point for a <code>RenderGraph</code> with …\nA render node that can be added to a <code>RenderGraph</code>.\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nA <code>Node</code> identifier. It automatically generates its own …\nA <code>NodeLabel</code> is used to reference a <code>NodeState</code> by either its …\nThe internal representation of a <code>Node</code>, with all data …\nThe context with all information required to interact with …\nThe render graph configures the modular, parallel and …\nThe context with all graph information required to run a …\nA command that signals the graph runner to run the sub …\nA texture [<code>Sampler</code>] defines how a pipeline will sample …\nA texture [<code>Sampler</code>] defines how a pipeline will sample …\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nThe internal representation of a slot, which specifies its …\nA collection of input or output <code>SlotInfos</code> for a <code>NodeState</code>.\nA <code>SlotLabel</code> is used to reference a slot by either its name …\nDescribes the render resources created (output) or used …\nA value passed between render <code>Nodes</code>. Corresponds to the …\nA <code>TextureView</code> describes a texture used in a pipeline.\nA <code>TextureView</code> describes a texture used in a pipeline.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns the graph node logic, issues draw calls, updates the …\nThe name of the type that implements <code>Node</code>.\nThe context with all graph information required to run a …\nA command that signals the graph runner to run the sub …\nFinishes the context for this <code>Node</code> by returning the sub …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the input slot value referenced by the <code>label</code>.\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the input slot value referenced by the <code>label</code> as …\nRetrieves the input slot value referenced by the <code>label</code> as …\nReturns the <code>SlotInfos</code> of the inputs.\nReturns the input slot values for the node.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new render graph context for the <code>node</code>.\nReturns the <code>SlotInfos</code> of the outputs.\nQueues up a sub graph for execution after the node has …\nSets the output slot value referenced by the <code>label</code>.\nAn edge, which connects two <code>Nodes</code> in a <code>RenderGraph</code>.\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nAn edge describing to ordering of both nodes (<code>output_node</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the id of the <code>input_node</code>.\nReturns the id of the <code>output_node</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>Node</code> which acts as an entry point for a <code>RenderGraph</code> with …\nThe name of the <code>GraphInputNode</code> of this graph. Used to …\nThe render graph configures the modular, parallel and …\nAdds the <code>node</code> with the <code>name</code> to the graph. If the name is …\nAdds the <code>Edge::NodeEdge</code> to the graph. This guarantees that …\nAdds the <code>Edge::SlotEdge</code> to the graph. This guarantees that …\nAdds the <code>sub_graph</code> with the <code>name</code> to the graph. If the name …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the <code>Node</code> referenced by the <code>label</code>.\nRetrieves the <code>NodeId</code> referenced by the <code>label</code>.\nRetrieves the <code>Node</code> referenced by the <code>label</code> mutably.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code>.\nRetrieves the <code>NodeState</code> referenced by the <code>label</code> mutably.\nRetrieves the sub graph corresponding to the <code>name</code>.\nRetrieves the sub graph corresponding to the <code>name</code> mutably.\nChecks whether the <code>edge</code> already exists in the graph.\nReturns the <code>NodeState</code> of the input node of this graph..\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over a tuple of the input edges and …\nReturns an iterator over a tuple of the output edges and …\nReturns an iterator over the <code>NodeStates</code>.\nReturns an iterator over the <code>NodeStates</code>, that allows …\nReturns an iterator over the sub graphs.\nReturns an iterator over the sub graphs, that allows …\nRemoves the <code>node</code> with the <code>name</code> from the graph. If the name …\nRemoves the <code>Edge::NodeEdge</code> from the graph. If either node …\nRemoves the <code>Edge::SlotEdge</code> from the graph. If any nodes or …\nRemoves the <code>sub_graph</code> with the <code>name</code> from the graph. If the …\nCreates an <code>GraphInputNode</code> with the specified slots if not …\nUpdates all nodes and sub graphs of the render graph. …\nVerifies that the edge existence is as expected and checks …\nA collection of input and output <code>Edges</code> for a <code>Node</code>.\nA <code>Node</code> without any inputs, outputs and subgraphs, which …\nA render node that can be added to a <code>RenderGraph</code>.\nA <code>Node</code> identifier. It automatically generates its own …\nA <code>NodeLabel</code> is used to reference a <code>NodeState</code> by either its …\nThe internal representation of a <code>Node</code>, with all data …\nThe context with all information required to interact with …\nAdds an edge to the <code>input_edges</code> if it does not already …\nAdds an edge to the <code>output_edges</code> if it does not already …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSearches the <code>input_edges</code> for a <code>Edge::SlotEdge</code>, which …\nSearches the <code>output_edges</code> for a <code>Edge::SlotEdge</code>, which …\nChecks whether the input edge already exists.\nChecks whether the output edge already exists.\nReturns this node’s id.\nSpecifies the required input slots for this node. They …\nSpecifies the required input slots for this node. They …\nReturns all “input edges” (edges going “in”) for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nCreates an <code>NodeState</code> without edges, but the <code>input_slots</code> …\nRetrieves the <code>Node</code>.\nRetrieves the <code>Node</code> mutably.\nSpecifies the produced output slots for this node. They …\nSpecifies the produced output slots for this node. They …\nReturns all “output edges” (edges going “out”) for …\nRemoves an edge from the <code>input_edges</code> if it exists.\nRemoves an edge from the <code>output_edges</code> if it exists.\nRuns the graph node logic, issues draw calls, updates the …\nThe name of the type that implements <code>Node</code>.\nUpdates internal node state using the current …\nUpdates internal node state using the current …\nValidates that each input slot corresponds to an input …\nValidates that each output slot corresponds to an output …\nA GPU-accessible [<code>Buffer</code>].\nA GPU-accessible [<code>Buffer</code>].\nA texture [<code>Sampler</code>] defines how a pipeline will sample …\nA texture [<code>Sampler</code>] defines how a pipeline will sample …\nThe internal representation of a slot, which specifies its …\nA collection of input or output <code>SlotInfos</code> for a <code>NodeState</code>.\nA <code>SlotLabel</code> is used to reference a slot by either its name …\nDescribes the render resources created (output) or used …\nA value passed between render <code>Nodes</code>. Corresponds to the …\nA <code>TextureView</code> describes a texture used in a pipeline.\nA <code>TextureView</code> describes a texture used in a pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the <code>SlotInfo</code> for the provided label.\nRetrieves the index (inside input or output slots) of the …\nRetrieves the <code>SlotInfo</code> for the provided label mutably.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no slots.\nReturns an iterator over the slot infos.\nReturns the count of slots.\nReturns the <code>SlotType</code> of this value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA draw function which is used to draw a specific <code>PhaseItem</code>.\nAn item which will be drawn to the screen. A phase item …\n<code>RenderCommand</code> is a trait that runs an ECS query and …\nA resource to collect and sort draw requests for specific …\nThe type used for ordering the items. The smallest values …\nAdds a <code>PhaseItem</code> to this render phase.\nDraws the <code>PhaseItem</code> by issuing draw calls via the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRenders the <code>PhaseItem</code> by issuing draw calls via the …\nSorts all of its <code>PhaseItems</code>.\nDetermines the order in which the items are drawn during …\nA draw function which is used to draw a specific <code>PhaseItem</code>.\nAn item which will be drawn to the screen. A phase item …\n<code>RenderCommand</code> is a trait that runs an ECS query and …\nThe type used for ordering the items. The smallest values …\nDraws the <code>PhaseItem</code> by issuing draw calls via the …\nPrepares data for the wrapped <code>RenderCommand</code> and then …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRenders the <code>PhaseItem</code> by issuing draw calls via the …\nDetermines the order in which the items are drawn during …\nDescribes the fragment process in a render pipeline.\nThe value is a wgpu <code>SurfaceTexture</code>, but dereferences to a …\nDescribes a <code>TextureView</code>.\nThe value is an actual wgpu <code>TextureView</code>.\nA [<code>RenderPass</code>], which tracks the current pipeline state to …\nDescribes how the vertex buffer is interpreted.\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nThe buffer which is used\nThe format of any vertex buffers used with this pipeline.\nForce a write and ignore stencil\nThe effect of draw calls on the depth and stencil aspects …\nIs the depth stencil used?\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe compiled fragment stage, its entry point, and the …\nThe size of buffer\nDebug label of the pipeline. This will show up in graphics …\nThe layout of bind groups for this pipeline.\nThe multi-sampling properties of the pipeline.\nUtility for creating RenderPipelines\nThe properties of the pipeline at the primitive assembly …\nUtilities for creating shader states.\nThe shader source\nThe shader source\nHow often this vertex buffer is “stepped” forward.\nUtilities for handling surfaces which can be either …\nThe color state of the render targets.\nUtility for a texture view which can either be created by …\nUtility for declaring pipelines.\nA render pass which allows tracking, for example using a …\nThis pipeline updates the stenctil\nThe compiled vertex stage, its entry point, and the input …\nThe buffer which is used\nReturns the argument unchanged.\nThe size of buffer\nCalls <code>U::from(self)</code>.\nThe effect of draw calls on the depth and stencil aspects …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDebug label of the pipeline. This will show up in graphics …\nThe layout of bind groups for this pipeline.\nThe multi-sampling properties of the pipeline.\nThe properties of the pipeline at the primitive assembly …\nThe compiled vertex stage, its entry point, and the input …\nDescribes the fragment process in a render pipeline.\nDescribes how the vertex buffer is interpreted.\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nThe format of any vertex buffers used with this pipeline.\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe shader source\nThe shader source\nHow often this vertex buffer is “stepped” forward.\nThe color state of the render targets.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe value is a wgpu <code>SurfaceTexture</code>, but dereferences to a …\nDescribes a <code>TextureView</code>.\nThe value is an actual wgpu <code>TextureView</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>SurfaceTexture</code> of the texture view if it is of …\nForce a write and ignore stencil\nIs the depth stencil used?\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis pipeline updates the stenctil\nA [<code>RenderPass</code>], which tracks the current pipeline state to …\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nReturns the argument unchanged.\nInsert a single debug marker.\nCalls <code>U::from(self)</code>.\nTracks the supplied render pass.\nEnd the current debug group.\nStart a new debug group.\nSets the active [<code>BindGroup</code>] for a given bind group index. …\nSets the active index buffer.\nSet push constant data.\nSets the active [<code>RenderPipeline</code>].\nSets the scissor region.\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nSet the rendering viewport.\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nblock compressed texture. 16 bytes per block.\nAllows the [<code>wgpu::TextureUsages::STORAGE_BINDING</code>] usage on …\nSupported when targeting the web through webassembly with …\nAllows the user to create arrays of buffers in shaders:\nRepresents the backends that wgpu will use.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nEnables clear to zero for textures.\nAllows the user to set a …\nAllows for explicit creation of textures of format …\nBy default, polygon depth is clipped to 0-1 range …\nAllows two outputs from a shader to be used for blending. …\nSupported on Windows 10\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nAllows textures with formats “r32float”, “rg32float…\nFeatures that are not guaranteed to be supported.\nSupported on Linux/Android, the web through webassembly …\nAdapter that has the highest performance. This is often a …\nAllows non-zero value for the <code>first_instance</code> member in …\nRepresents the sets of limits an adapter/device supports.\nAdapter that uses the least possible power. This is often …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nSupported on macOS/iOS\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call <code>RenderPass::multi_draw_indirect</code> …\nAllows the user to call …\nConfiguration resource for Multi-Sample Anti-Aliasing.\nYUV 4:2:0 chroma subsampled format.\nPower usage is not considered when choosing an adapter.\nAllows the user to create bind groups containing arrays …\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nAll the apis that wgpu offers first tier of support for.\nAllows the use of push constants: small, fast bits of …\nPower Preference when choosing a physical adapter.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [-127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nAllows for the creation of ray-tracing queries within …\nAllows for the creation of ray-tracing acceleration …\nAllows for usage of textures of format …\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [-127, …\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nAllows shaders to index sampled texture and storage buffer …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to acquire the FP16 ability\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nAllows vertex shaders to have outputs which are not …\nEnables creating shader modules from SPIR-V binary data …\nAllows the user to create uniform arrays of storage …\nStencil format with 8 bit integer stencil.\nEnables device specific texture format features.\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables BCn family of compressed textures. All BCn …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries inside render passes.\nUnderlying texture data format.\nAllows shaders to index uniform buffer and storage texture …\nEnables using 64-bit types for vertex attributes.\nEnables bindings of writable storage buffers and textures …\nSupported on Windows, Linux/Android, and macOS/iOS via …\nProvides configuration for renderer initialization. Use …\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nReturns the aspect-specific format of the original format\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nThe number of bytes one texel block occupies during an …\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nThe constraints on limits allowed regardless of what the …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe features to ensure are disabled regardless of what the …\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe features to ensure are enabled regardless of what the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the format features guaranteed by the WebGPU spec.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns <code>true</code> if the format has a stencil aspect\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if the format is a multi-planar format\nReturns <code>true</code> for srgb formats.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe imposed limits.\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the number of planes a multi-planar format has.\nPresent mode for surfaces if a surface is used.\nWhether a trace is recorded an stored in the current …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nReturns the required features (if any) in order to use the …\nReturns the sample type compatible with this format and …\nThe number of samples to run for Multi-Sample …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nReturns the size multiple requirement for a texture using …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nExplicitly set a texture format or let the renderer …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nModify the current limits to use the buffer alignment …\nModify the current limits to use the resolution limits of …\ncompressed block dimensions\nASTC RGBA channel\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutes the [<code>RenderGraph</code>] current render graph.\nPrepares GPU-owned resources by initializing them if they …\nExtracts data from the current state.\nUploads data to the GPU which is needed for rendering.\nUpdates the [<code>RenderGraph</code>] with all of its nodes and then …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis system sorts all <code>RenderPhases</code> for the [<code>PhaseItem</code>] …\nChildren are the source. We construct the <code>target</code> from …\nIf not otherwise specified, raster tiles usually are 512.0 …\nNo data available so nothing to render\nParent tile is the source. We construct the <code>target</code> from …\nSource and target are equal, so no need to differentiate. …\nThis defines the source tile shaped from which the content …\nDefines the exact location where a specific tile on the …\nThe tile mask pattern assigns each tile a value which can …\nDefines the <code>target</code> tile and its <code>source</code> from which data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe tile mask pattern assigns each tile a value which can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe internal structure which is used for storage\nThe size of the <code>inner</code> buffer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransforms coordinates in clip space to window coordinates.\nA transform which can be used to transform between clip …\nAlternative implementation to <code>clip_to_window</code>. Transforms …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis function matches how maplibre-gl-js implements …\nCalculates an <code>Aabb2</code> bounding box which contains at least …\nAn alternative implementation for <code>view_bounding_box</code>.\nOrder of transformations reversed: …\nGets the world coordinates for the specified <code>window</code> …\nAlternative implementation to <code>window_to_world</code>\nA container of <code>Stage</code>s set to be run in a linear order.\nDefines a set of strongly-typed labels for a class of …\nAdds the given <code>stage</code> at the last position of the schedule.\nAdds the given <code>stage</code> immediately after the <code>target</code> stage.\nAdds the given <code>stage</code> immediately before the <code>target</code> stage.\nAdds a system to the <code>Stage</code> identified by <code>stage_label</code>.\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a shared reference to the stage identified by <code>label</code>…\nReturns a unique, mutable reference to the stage …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nIterates over all of schedule’s stages and their labels, …\nRuns the stage; this happens once per update. Implementors …\nExecutes each <code>Stage</code> contained in the schedule, one at a …\nFetches the <code>Stage</code> of type <code>T</code> marked with <code>label</code>, then …\nA color in the ACES 2065-1 color space.\nA color in the ACES 2065-1 color space.\nA color in the ACEScc color space.\nA color in the ACEScc color space.\nA color in the ACEScct color space.\nA color in the ACEScct color space.\nA color in the ACEScg color space.\nA color in the ACEScg color space.\nA color with an alpha component.\nA color in the BT.2020 color space.\nA color in the BT.2020 color space.\nA color in the BT.2100 color space.\nA color in the BT.2100 color space.\nA color in the CIE L*C*h° color space.\nA color in the CIE L*C*h° color space.\nA color in the CIE L*a*b* color space.\nA color in the CIE L*a*b* color space.\nA color in the CIE XYZ color space.\nA color in the CIE XYZ color space.\nA trait that should be implemented by provider crates on …\nA trait used to simpify the interface of the <code>Alpha</code> and …\nA color in the DCI-P3 (aka P3 DCI and P3 D60) color space.\nA color in the DCI-P3 (aka P3 DCI and P3 D60) color space.\nA color in the X’Y’Z’ color space, a DCI …\nA color in the X’Y’Z’ color space, a DCI …\nA color in the Display P3 (aka P3 D65) color space.\nA color in the Display P3 (aka P3 D65) color space.\nA color in the encoded BT.2020 color space.\nA color in the encoded BT.2020 color space.\nA color in the encoded BT.2100 color space with HLG …\nA color in the encoded BT.2100 color space with HLG …\nA color in the encoded BT.2100 color space with PQ …\nA color in the encoded BT.2100 color space with PQ …\nA color in the Display P3 (aka P3 D65) color space.\nA color in the Display P3 (aka P3 D65) color space.\nA color in the encoded Rec.709/BT.709 color space.\nA color in the encoded Rec.709/BT.709 color space.\nA color in the encoded sRGB color space.\nA color in the encoded sRGB color space.\nA color in a generic color space that can be represented …\nA color in a generic color space that can be represented …\nA color in a generic color space that can be represented …\nA color in a generic color space that can be represented …\nA color in the HSL color space.\nA color in the HSL color space.\nA color in the HSV color space.\nA color in the HSV color space.\nA color in the ICtCp color space with HLG (Hybrid …\nA color in the ICtCp color space with HLG (Hybrid …\nA color in the ICtCp color space with PQ (Perceptual …\nA color in the ICtCp color space with PQ (Perceptual …\nA color in the linear (decoded) sRGB color space.\nA color in the linear (decoded) sRGB color space.\nA single-channel CIE luma (non-linear transform from …\nA single-channel CIE luma (non-linear transform from …\nA single-channel CIE luminance.\nA single-channel CIE luminance.\nA color in the Oklab color space.\nA color in the Oklab color space.\nA color in the Oklch color space (a transformation from …\nA color in the Oklch color space (a transformation from …\nA premultiplied color with an alpha component.\nA color in the Rec.709/BT.709 color space.\nA color in the Rec.709/BT.709 color space.\nAn enum with a variant for each of the color spaces …\nStores the style for a multi-layered map.\nA color in the YCbCr color space. See discussion of the …\nA color in the YCbCr color space. See discussion of the …\nA color in the YCxCz (also called YyCxCz) color space, …\nA color in the YCxCz (also called YyCxCz) color space, …\nA color in the YPbPr color space. See discussion of the …\nA color in the YPbPr color space. See discussion of the …\nA color in the Y’CbCr color space. See discussion of the …\nA color in the Y’CbCr color space. See discussion of the …\nA color in the Y’PbPr color space. See discussion of the …\nA color in the Y’PbPr color space. See discussion of the …\nA color in the YUV color space. See discussion of the …\nA color in the YUV color space. See discussion of the …\nThe a component, representing green-red chroma difference.\nThe a component, representing green-red chroma difference.\nThe alpha component.\nThe alpha component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe blue component.\nThe b component, representing blue-yellow chroma …\nThe b component, representing blue-yellow chroma …\nThe C (chroma) component. Varies from 0 to a hue dependent …\nThe C (chroma) component. Varies from 0 to a hue dependent …\nThe Cb (chroma-blue/yellow) component.\nThe Cb (chroma-blue/yellow) component.\nThe contained color, which is completely separate from the …\nThe contained color, which has been premultiplied with …\nThe Cp (chroma-protan) component.\nThe Cp (chroma-protan) component.\nThe Cr (chroma-red/green) component.\nThe Cr (chroma-red/green) component.\nThe Ct (chroma-tritan) component.\nThe Ct (chroma-tritan) component.\nThe Cx (chroma difference blue/yellow) component\nThe Cz (chroma difference red/green) component\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert <code>self</code> into its canonical <code>cint</code> type.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe green component.\nThe h (hue) component. Varies from -PI to PI.\nThe h (hue) component. Varies from -PI to PI.\nThe H (hue) component. Varies from 0 to 1.\nThe H (hue) component. Varies from 0 to 1.\nThe I (intensity) component.\nThe I (intensity) component.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a <code>Self</code> from its canonical <code>cint</code> type.\nCIE luminance.\nCIE luminance.\nThe L (lightness) component. Varies from 0 to 100.\nThe L (lightness) component. Varies from 0 to 100.\nThe L (lightness) component. Varies from 0 to 1\nThe L (lightness) component. Varies from 0 to 1.\nThe L (lightness) component. Varies from 0 to 1.\nVector tile layer drawing utilities.\nThe Pb (chroma-blue/yellow) component.\nThe Pb (chroma-blue/yellow) component.\nThe Pr (chroma-red/green) component.\nThe Pr (chroma-red/green) component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nThe red component.\nRaster tile layer description\nThe S (saturation) component. Varies from 0 to 1.\nThe S (saturation) component. Varies from 0 to 1.\nVector tile data utilities.\nDefault vector tile styles configuration.\nThe U (chroma-blue/yellow) component.\nThe V (value) component. Varies from 0 to 1.\nThe V (chroma-red/green) component.\nThe first component.\nThe first component.\nThe X’ component.\nThe X component.\nThe second component.\nThe Y’ component.\nThe Y component.\nThe Y (luminance) component.\nThe Y’ (luma) component.\nThe Y (luminance) component.\nThe Y’ (luma) component.\nThe Y (luminance) component.\nThe Yy (luminance) component.\nThe third component.\nThe Z’ component.\nThe Z component.\nThe different types of paints.\nStores all the styles for a specific layer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTiles can be positioned using either the xyz coordinates …\nString url to a JSON tile.\nString url to a tile.\nSource properties for tiles or rasters.\nString which contains attribution information for the used …\nThe bounds in which tiles are available.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax zoom level at which tiles are available.\nMin zoom level at which tiles are available.\nArray of URLs which can contain place holders like {x}, …\nStores the style for a multi-layered map.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nA convenience type alias for a boxed <code>System</code> trait object.\nAn system that can be added to a <code>Schedule</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the system’s name.\nConversion trait to turn something into a <code>System</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTurns this value into its corresponding <code>System</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA component is data associated with an <code>Entity</code>. Each entity …\nReturns a boxed object from a boxed trait object if the …\nReturns a mutable reference to the object within the trait …\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the trait object wraps an object of type …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVertex buffers index data type.\nVertex buffer which includes additional padding to fulfill …\nConstructor for Fill and Stroke vertices.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTessellator implementation.\nContains the error value\nContains the success value\nBuild tessellations with vectors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFeatures are described in section 4.2 of the specification\nGeomType is described in section 4.3.4 of the specification\nLayers are described in section 4.1 of the specification\nVariant type encoding The use of values is described in …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>bool_value</code>, or the default value if …\nReturns the value of <code>double_value</code>, or the default value if …\nReturns the value of <code>extent</code>, or the default value if <code>extent</code>…\nAlthough this is an “optional” field it is required by …\nThe actual features in this tile.\nReturns the value of <code>float_value</code>, or the default value if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>GeomType</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nContains a stream of commands and parameters (vertices). A …\nReturns the value of <code>id</code>, or the default value if <code>id</code> is …\nReturns the value of <code>int_value</code>, or the default value if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>GeomType</code>.\nDictionary encoding for keys\nSets <code>type</code> to the provided enum value.\nReturns the value of <code>sint_value</code>, or the default value if …\nReturns the value of <code>string_value</code>, or the default value if …\nExactly one of these values must be present in a valid …\nTags of this feature are encoded as repeated pairs of …\nReturns the enum value of <code>type</code>, or the default if the …\nThe type of geometry stored in this feature.\nReturns the value of <code>uint_value</code>, or the default value if …\nDictionary encoding for values\nAny compliant implementation must first read the version …\nMeasures the frames per second.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTraits used by label implementations\nThis method tests for <code>self</code> and <code>other</code> values to be …\nMeasures the frames per second.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns coordinates for tiles within bavaria according to …\nA two-dimensional AABB, aka a rectangle.\nA three-dimensional AABB, aka a rectangular prism.\nA wrapper type that enables ordering floats. This is a …\nA 3-dimensional plane formed from the equation: …\nPlane distance value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a plane from a point and a normal vector. The …\nConstructs a plane that passes through the the three …\nReturns unsorted intersection points with an Aabb3 Adopted …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum point of the AABB\nMaximum point of the AABB\nMinimum point of the AABB\nMinimum point of the AABB\nPlane normal\nConstruct a plane from a normal vector and a scalar …\nConstruct a new axis-aligned bounding box from two points.\nConstruct a new axis-aligned bounding box from two points.\nCompute corners.\nCompute corners.\nError when decoding e.g. the protobuf file\nSending of results failed\nA request for a tile at the given coordinates and in the …\nHolds for each feature the count of indices.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQueues PhaseItems for rendering.\nSpecifies the instructions which are going to be sent to …\nRequests tiles which are currently in view\nPrepares GPU-owned resources by initializing them if they …\nUploads data to the GPU which is needed for rendering.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError when decoding e.g. the protobuf file\nSending of results failed\nA request for a tile at the given coordinates and in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA ring-buffer like pool of buffers.\nThis is inspired by the memory pool in Vulkan documented …\nThe VertexBuffers can contain padding elements. Not …\nAllocates\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe internal structure which is used for storage\nThe size of the <code>inner</code> buffer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHolds for each feature the count of indices.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWindow which references a physical <code>RawWindow</code>. This is only …\nWindow of a certain <code>PhysicalSize</code>. This can either be a …\nA configuration for a window which determines the …\nWindow size with a width and an height in pixels.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")